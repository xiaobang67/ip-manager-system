"""Initial database schema

Revision ID: 001
Revises: 
Create Date: 2025-01-09 10:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create users table
    op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=50), nullable=False),
        sa.Column('password_hash', sa.String(length=255), nullable=False),
        sa.Column('email', sa.String(length=100), nullable=True),
        sa.Column('role', sa.Enum('admin', 'manager', 'user', name='userrole'), nullable=True),
        sa.Column('theme', sa.Enum('light', 'dark', name='usertheme'), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_is_active'), 'users', ['is_active'], unique=False)

    # Create subnets table
    op.create_table('subnets',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('network', sa.String(length=18), nullable=False),
        sa.Column('netmask', sa.String(length=15), nullable=False),
        sa.Column('gateway', sa.String(length=15), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('vlan_id', sa.Integer(), nullable=True),
        sa.Column('location', sa.String(length=100), nullable=True),
        sa.Column('created_by', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('network')
    )
    op.create_index(op.f('ix_subnets_id'), 'subnets', ['id'], unique=False)
    op.create_index(op.f('ix_subnets_network'), 'subnets', ['network'], unique=False)
    op.create_index(op.f('ix_subnets_vlan_id'), 'subnets', ['vlan_id'], unique=False)
    op.create_index(op.f('ix_subnets_created_by'), 'subnets', ['created_by'], unique=False)

    # Create ip_addresses table
    op.create_table('ip_addresses',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('ip_address', sa.String(length=15), nullable=False),
        sa.Column('subnet_id', sa.Integer(), nullable=False),
        sa.Column('status', sa.Enum('available', 'allocated', 'reserved', 'conflict', name='ipstatus'), nullable=True),
        sa.Column('mac_address', sa.String(length=17), nullable=True),
        sa.Column('user_name', sa.String(length=255), nullable=True),
        sa.Column('device_type', sa.String(length=50), nullable=True),
        sa.Column('location', sa.String(length=100), nullable=True),
        sa.Column('assigned_to', sa.String(length=100), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('allocated_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('allocated_by', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['allocated_by'], ['users.id'], ),
        sa.ForeignKeyConstraint(['subnet_id'], ['subnets.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('ip_address')
    )
    op.create_index(op.f('ix_ip_addresses_id'), 'ip_addresses', ['id'], unique=False)
    op.create_index(op.f('ix_ip_addresses_ip_address'), 'ip_addresses', ['ip_address'], unique=False)
    op.create_index(op.f('ix_ip_addresses_subnet_id'), 'ip_addresses', ['subnet_id'], unique=False)
    op.create_index(op.f('ix_ip_addresses_status'), 'ip_addresses', ['status'], unique=False)
    op.create_index(op.f('ix_ip_addresses_mac_address'), 'ip_addresses', ['mac_address'], unique=False)
    op.create_index(op.f('ix_ip_addresses_user_name'), 'ip_addresses', ['user_name'], unique=False)

    # Create custom_fields table
    op.create_table('custom_fields',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('entity_type', sa.Enum('ip', 'subnet', name='entitytype'), nullable=False),
        sa.Column('field_name', sa.String(length=50), nullable=False),
        sa.Column('field_type', sa.Enum('text', 'number', 'date', 'select', name='fieldtype'), nullable=False),
        sa.Column('field_options', sa.JSON(), nullable=True),
        sa.Column('is_required', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_custom_fields_id'), 'custom_fields', ['id'], unique=False)
    op.create_index(op.f('ix_custom_fields_entity_type'), 'custom_fields', ['entity_type'], unique=False)
    op.create_index(op.f('ix_custom_fields_field_name'), 'custom_fields', ['field_name'], unique=False)

    # Create tags table
    op.create_table('tags',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=50), nullable=False),
        sa.Column('color', sa.String(length=7), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_tags_id'), 'tags', ['id'], unique=False)
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=False)

    # Create system_configs table
    op.create_table('system_configs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('config_key', sa.String(length=100), nullable=False),
        sa.Column('config_value', sa.Text(), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('updated_by', sa.Integer(), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('config_key')
    )
    op.create_index(op.f('ix_system_configs_id'), 'system_configs', ['id'], unique=False)
    op.create_index(op.f('ix_system_configs_config_key'), 'system_configs', ['config_key'], unique=False)

    # Create audit_logs table
    op.create_table('audit_logs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('action', sa.String(length=50), nullable=False),
        sa.Column('entity_type', sa.String(length=20), nullable=False),
        sa.Column('entity_id', sa.Integer(), nullable=True),
        sa.Column('old_values', sa.JSON(), nullable=True),
        sa.Column('new_values', sa.JSON(), nullable=True),
        sa.Column('ip_address', sa.String(length=45), nullable=True),
        sa.Column('user_agent', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_index(op.f('ix_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.create_index(op.f('ix_audit_logs_entity_type'), 'audit_logs', ['entity_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_entity_id'), 'audit_logs', ['entity_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_created_at'), 'audit_logs', ['created_at'], unique=False)

    # Create alert_rules table
    op.create_table('alert_rules',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('rule_type', sa.Enum('utilization', 'conflict', 'expiry', name='ruletype'), nullable=False),
        sa.Column('threshold_value', sa.DECIMAL(precision=5, scale=2), nullable=True),
        sa.Column('subnet_id', sa.Integer(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('notification_emails', sa.Text(), nullable=True),
        sa.Column('created_by', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
        sa.ForeignKeyConstraint(['subnet_id'], ['subnets.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_alert_rules_id'), 'alert_rules', ['id'], unique=False)
    op.create_index(op.f('ix_alert_rules_rule_type'), 'alert_rules', ['rule_type'], unique=False)
    op.create_index(op.f('ix_alert_rules_is_active'), 'alert_rules', ['is_active'], unique=False)

    # Create custom_field_values table
    op.create_table('custom_field_values',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('field_id', sa.Integer(), nullable=False),
        sa.Column('entity_id', sa.Integer(), nullable=False),
        sa.Column('entity_type', sa.Enum('ip', 'subnet', name='entitytype'), nullable=False),
        sa.Column('field_value', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['field_id'], ['custom_fields.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('field_id', 'entity_id', 'entity_type', name='unique_field_entity')
    )
    op.create_index(op.f('ix_custom_field_values_id'), 'custom_field_values', ['id'], unique=False)
    op.create_index(op.f('ix_custom_field_values_entity_id'), 'custom_field_values', ['entity_id'], unique=False)
    op.create_index(op.f('ix_custom_field_values_entity_type'), 'custom_field_values', ['entity_type'], unique=False)

    # Create ip_tags table
    op.create_table('ip_tags',
        sa.Column('ip_id', sa.Integer(), nullable=False),
        sa.Column('tag_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['ip_id'], ['ip_addresses.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('ip_id', 'tag_id')
    )

    # Create subnet_tags table
    op.create_table('subnet_tags',
        sa.Column('subnet_id', sa.Integer(), nullable=False),
        sa.Column('tag_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['subnet_id'], ['subnets.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('subnet_id', 'tag_id')
    )

    # Create alert_history table
    op.create_table('alert_history',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('rule_id', sa.Integer(), nullable=False),
        sa.Column('alert_message', sa.Text(), nullable=False),
        sa.Column('severity', sa.Enum('low', 'medium', 'high', 'critical', name='alertseverity'), nullable=True),
        sa.Column('is_resolved', sa.Boolean(), nullable=True),
        sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('resolved_by', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['resolved_by'], ['users.id'], ),
        sa.ForeignKeyConstraint(['rule_id'], ['alert_rules.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_alert_history_id'), 'alert_history', ['id'], unique=False)
    op.create_index(op.f('ix_alert_history_severity'), 'alert_history', ['severity'], unique=False)
    op.create_index(op.f('ix_alert_history_is_resolved'), 'alert_history', ['is_resolved'], unique=False)
    op.create_index(op.f('ix_alert_history_created_at'), 'alert_history', ['created_at'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('alert_history')
    op.drop_table('subnet_tags')
    op.drop_table('ip_tags')
    op.drop_table('custom_field_values')
    op.drop_table('alert_rules')
    op.drop_table('audit_logs')
    op.drop_table('system_configs')
    op.drop_table('tags')
    op.drop_table('custom_fields')
    op.drop_table('ip_addresses')
    op.drop_table('subnets')
    op.drop_table('users')
    # ### end Alembic commands ###